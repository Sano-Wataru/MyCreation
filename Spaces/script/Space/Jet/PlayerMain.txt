#東方弾幕風[Player]	//自機スクリプトであることを示します
#ScriptVersion[2]	//スクリプトバージョン2が必須です
#Menu[Jet]		//自機選択画面で表示されるメニューです
#Text[]	//自機選択画面で表示されるテキストです
#Image[]	//自機選択画面で表示される画像ファイルへのパスです
#ReplayName[Jet]	//リプレイ選択時に表示される文字です。8文字以内です。

script_player_main
{
	let imgJet = "script\Space\img\all_type.png";
	let shotCount = -1;//弾を連続で発射するための変数
	let bNextShot = false;//ちょん押しでも自弾を連続発射するための変数(説明しづらい)
	let objShot = NULL;//誘導弾
        let i = 0;
        let s = 0;
	@Initialize
	{	
		//自機の初期化時に一回だけ呼び出される部分です
		SetPlayerLifeImage(imgJet, 261, 274, 306, 342);//残機数の画像
		LoadGraphic(imgJet);
		SetSpeed(4, 1.6);//移動速度を設定
		LoadPlayerShotData(GetCurrentScriptDirectory~"\PlayerShot.txt");
		SetItemCollectLine(128);//アイテム回収ラインを設定
        SetInitialBombCount(3);
	}
	
	@MainLoop
        {  
      if(GetPlayerLife < 2) {
        SetIntersectionCircle(1000,1000,0);
        }else{
       SetIntersectionCircle(GetPlayerX,GetPlayerY,1);
       }

      if(i> 5 && GetKeyState(VK_SHOT)==KEY_HOLD || GetKeyState(VK_SHOT)==KEY_PUSH){
           //弱弱
            CreatePlayerShot01(GetPlayerX, GetPlayerY, 15, 270, 1, 3, 1);
            CreatePlayerShot01(GetPlayerX, GetPlayerY-20, 15, 270, 1, 3, 1);
          if(GetPoint > 10){
           //弱
            CreatePlayerShot01(GetPlayerX+10, GetPlayerY, 15, 270, 1, 3, 1);
            CreatePlayerShot01(GetPlayerX-10, GetPlayerY, 15, 270, 1, 3, 1);
               }
          if(GetPoint > 50){
           //中
            CreatePlayerShot01(GetPlayerX+10, GetPlayerY-20, 15, 270, 1, 3, 1);
            CreatePlayerShot01(GetPlayerX-10, GetPlayerY-20, 15, 270, 1, 3, 1);
            CreatePlayerShot01(GetPlayerX+10, GetPlayerY-40, 15, 270, 1, 3, 1);
            CreatePlayerShot01(GetPlayerX-10, GetPlayerY-40, 15, 270, 1, 3, 1);
           }
          if(GetPoint > 200){
           //強
            CreatePlayerShot01(GetPlayerX+20, GetPlayerY-20, 15, 270, 1, 3, 1);
            CreatePlayerShot01(GetPlayerX-20, GetPlayerY-20, 15, 270, 1, 3, 1);
            }
           if(GetPoint > 500){
           //強強
            CreatePlayerShot01(GetPlayerX, GetPlayerY, 15, 260, 1, 5, 2);
            CreatePlayerShot01(GetPlayerX, GetPlayerY, 15, 280, 1, 5, 2);
            CreatePlayerShot01(GetPlayerX+10, GetPlayerY, 15, 260, 1, 5, 2);
            CreatePlayerShot01(GetPlayerX-10, GetPlayerY, 15, 280, 1, 5, 2);
             }
          i=0;
             
        }
           i++;
		yield;
	}
	@Missed{
   if(GetPoint > 700){
     AddPoint(-2);
       }else{
     }
    if(GetPoint > 150){
     AddPoint(-1);
           }else{
                          }
            }
	@SpellCard
	{
        UseSpellCard("Shield",0);
	}
	
	@DrawLoop
	{
		//描画ループ。スキップされない限り1フレームに1回実行されます
                    if(GetPlayerLife > 1){
                SetTexture(imgJet);
		SetGraphicRect(29, 0, 51, 21);
		DrawGraphic(GetPlayerX(), GetPlayerY());	
            }
	}
	
	@Finalize
	{
		//スクリプト終了時に一回だけ呼び出される部分です
		DeleteGraphic(imgJet);
	}

}

script_spell Shield
{
   let G_obj;
   let G_obj2;
   let mainframe = 0;
   let alpha = 0;
   let a = 0;
   @Initialize
    {
   Effect_01;
   Effect_02;
    }

   @MainLoop
    {
       DeleteEnemyShotImmediatelyInCircle(SHOT, GetPlayerX, GetPlayerY, 70);
       SetPlayerInvincibility(1);
       Obj_SetPosition( G_obj, GetPlayerX-61, GetPlayerY-61 ); 
                  ObjEffect_SetVertexColor(G_obj, 0, alpha, 255, 255, 255); 
                  ObjEffect_SetVertexColor(G_obj, 1, alpha, 255, 255, 255); 
                  ObjEffect_SetVertexColor(G_obj, 2, alpha, 255, 255, 255); 
                  ObjEffect_SetVertexColor(G_obj, 3, alpha, 255, 255, 255); 
                  ObjEffect_SetVertexColor(G_obj2, 0, alpha, 255, 255, 255); 
                  ObjEffect_SetVertexColor(G_obj2, 1, alpha, 255, 255, 255); 
                  ObjEffect_SetVertexColor(G_obj2, 2, alpha, 255, 255, 255); 
                  ObjEffect_SetVertexColor(G_obj2, 3, alpha, 255, 255, 255); 
          if(mainframe > 200){
         alpha -= 3;
      } 
          if(mainframe > 280){
         End;
      } 
         if(alpha < 220 && a == 0){
            alpha += 3;
         }
         if(alpha > 220 && a == 0){
            a = 1;
         }
       mainframe ++ ;
     yield;
    }

   @Finalize
    {
    }

task Effect_01
{
  let obj = Obj_Create(OBJ_EFFECT);
  let path = GetCurrentScriptDirectory ~ "Shield.png"; //パス

                  LoadGraphic(path); //画像の読み込み
                  ObjEffect_SetTexture( obj, path);
                  ObjEffect_SetPrimitiveType( obj, PRIMITIVE_TRIANGLESTRIP);
                  ObjEffect_CreateVertex( obj, 4 );
                  ObjEffect_SetVertexUV( obj, 0, 0, 0);
                  ObjEffect_SetVertexUV( obj, 1, 122, 0);
                  ObjEffect_SetVertexUV( obj, 2, 0, 122);
                  ObjEffect_SetVertexUV( obj, 3, 122, 122);
                  ObjEffect_SetVertexXY( obj, 0, 0, 0);
                  ObjEffect_SetVertexXY( obj, 1, 122, 0);
                  ObjEffect_SetVertexXY( obj, 2, 0, 122);
                  ObjEffect_SetVertexXY( obj, 3, 122, 122);
                  ObjEffect_SetVertexColor(obj, 0, alpha, 255, 255, 255); 
                  ObjEffect_SetVertexColor(obj, 1, alpha, 255, 255, 255); 
                  ObjEffect_SetVertexColor(obj, 2, alpha, 255, 255, 255); 
                  ObjEffect_SetVertexColor(obj, 3, alpha, 255, 255, 255); 
                 ObjEffect_SetRenderState(obj, ALPHA);
                 Obj_SetPosition( obj, GetPlayerX-61, GetPlayerY-61 );         
                 ObjEffect_SetLayer( obj, 3 );
           G_obj = obj;

         }

task Effect_02
{
  let obj = Obj_Create(OBJ_EFFECT);
  let path = GetCurrentScriptDirectory ~ "Blue_Circle.png"; //パス
  let size = 0.78;

                  LoadGraphic(path); //画像の読み込み
                  ObjEffect_SetTexture( obj, path);
                  ObjEffect_SetPrimitiveType( obj, PRIMITIVE_TRIANGLESTRIP);
                  ObjEffect_CreateVertex( obj, 4 );

                  ObjEffect_SetVertexUV( obj, 0, 0, 0);
                  ObjEffect_SetVertexUV( obj, 1, 250, 0);
                  ObjEffect_SetVertexUV( obj, 2, 0, 250);
                  ObjEffect_SetVertexUV( obj, 3, 250, 250);

                  ObjEffect_SetVertexXY( obj, 0, 0, 0);
                  ObjEffect_SetVertexXY( obj, 1, 250, 0);
                  ObjEffect_SetVertexXY( obj, 2, 0, 250);
                  ObjEffect_SetVertexXY( obj, 3, 250, 250);

                  ObjEffect_SetVertexColor(obj, 0, alpha, 255, 255, 255); 
                  ObjEffect_SetVertexColor(obj, 1, alpha, 255, 255, 255); 
                  ObjEffect_SetVertexColor(obj, 2, alpha, 255, 255, 255); 
                  ObjEffect_SetVertexColor(obj, 3, alpha, 255, 255, 255); 
                 
                  ObjEffect_SetScale(obj, size, size);  

                 ObjEffect_SetRenderState(obj, ADD);
                 Obj_SetPosition( obj, GetPlayerX-125*size, GetPlayerY-125*size );         
                 ObjEffect_SetLayer( obj, 3 );
           G_obj2 = obj;

         while(Obj_BeDeleted(obj) == false){
          Obj_SetPosition( obj, GetPlayerX-125*size, GetPlayerY-125*size );
         yield;
        }

         }

}