script_enemy_main//シールド船//
{
   let gcsd = GetCurrentScriptDirectory;

  //シールドに必要な変数定義// 
   let G_obj = 0;
   let cnt = 0;
   let Life = 200; //敵本体のライフ
   let ShieldLife = 120; //シールドのライフ
  //ここまで//
   let level = 1;

    @Initialize
    {
        let imgEnemy= gcsd~"img\enemy_all.png";
       SetLife(Life + ShieldLife);//シールドに必要なもの//
    SetTexture(imgEnemy);
    SetGraphicRect(192, 85, 254, 145);
    SetGraphicScale(0.8, 0.8);

   LoadUserShotData(gcsd~"ShotData_01.txt");
   ShieldMiniTask(1.2, 26, 47);//シールドに必要なもの//
   MainTask;
  }

   @MainLoop
   {
       //当たり判定は消す//
    SetGraphicAngle(0, 0, GetAngle - 90);

   if(GetLife < 200 && GetLife >= 100){
     level = 0.5;
          }
   if(GetLife < 100){
     level = 0.2;
          }

         Obj_SetPosition( G_obj, GetX, GetY );

     if(GetX < GetClipMinX - 70 || GetX > GetClipMaxX + 70 || GetY < GetClipMinY - 70 || GetY > GetClipMaxY + 70){
        VanishEnemy;
      }
       yield;
   }

   @Finalize
   {
    let angle = 0;
     if(GetX < GetClipMinX - 70 || GetX > GetClipMaxX + 70 || GetY < GetClipMinY - 70 || GetY > GetClipMaxY + 70){
   }else{
     CreateEnemyFromFile(gcsd~"EnemyDeath01.txt", GetX, GetY, 0, 0, 0);
      SetCommonData("MPowerAmount", 2);
      SetCommonData("PowerAmount", 12);

      SetCommonData("ShieldAmount", rand(15,25));
      SetCommonData("K_ShieldAmount", rand(6,10));
    }
     SetCommonData("ボス死亡", 1);
   }

   @DrawLoop
   {//描画
     DrawGraphic(GetX, GetY);
   }

     function Wait(let x){
    loop(x){yield;}
        }

function WayLaser01(X,Y,Speed,Angle,Length,Width,Color,Delay,Way,Gap) {
    // X     X座標
    // Y     Y座標
    // Speed 弾速
    // Angle 角度
    // Color 弾の色
    // Delay ディレイ
    // Way   弾の数
    // Gap   弾同士の間隔　値を大きくすると弾が広がって撃たれます。
    Angle -= (Way-1)/2*Gap;
    loop(Way) {
        CreateLaser01(X,Y,Speed,Angle,Length,Width,Color,Delay);
        Angle += Gap;
    }
}

 task MainTask{
  let angle = 0; let distance = 60; let a = 0; let b = 0;
    SetMovePosition03(GetX, GetY+200, 15, 2);
      Wait(150);
 loop(20){

  loop(5){
   loop(30){
     CreateShotA(0, GetX+distance*cos(angle+a-b), GetY+distance*sin(angle-a+b), 10);
     SetShotDataA(0, 0, 0, angle, 0, 0, 0, 31);
     SetShotDataA(0, 120, 0, angle, 0.4, 0.1, 3, 31);
      FireShot(0);
        angle += 360/30; a += 1; b += 0.1;
       yield;
    }
  }

   Wait(100*level);

  loop(5){
   loop(30){
     CreateShotA(0, GetX+distance*cos(angle+a-b), GetY+distance*sin(angle-a+b), 10);
     SetShotDataA(0, 0, 0, angle, 0, 0, 0, 31);
     SetShotDataA(0, 120, 0, angle, 0.4, 0.1, 3, 31);
      FireShot(0);
        angle -= 360/30; a -= 1;  b -= 0.1;
       yield;
    }
  }

  loop(5){
   loop(30){
     CreateShotA(0, GetX+distance*cos(angle+a-b), GetY+distance*sin(angle-a+b), 10);
     SetShotDataA(0, 0, 0, angle, 0, 0, 0, 31);
     SetShotDataA(0, 120, 0, angle, 0.4, 0.1, 3, 31);
      FireShot(0);
        angle += 360/30; a += 1; b += 0.1; distance += 1;
       yield;
    }
  }

   Wait(100*level);

  loop(5){
   loop(30){
     CreateShotA(0, GetX+distance*cos(angle+a-b), GetY+distance*sin(angle-a+b), 10);
     SetShotDataA(0, 0, 0, angle, 0, 0, 0, 31);
     SetShotDataA(0, 120, 0, angle, 0.4, 0.1, 3, 31);
      FireShot(0);
        angle -= 360/30; a -= 1;  b -= 0.1; distance -= 1;
       yield;
    }
  }
   Wait(100*level);

 }//loop

}

#include_function".\Function_ShieldMini.txt"
}