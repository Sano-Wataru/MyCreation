script_enemy Family4{

  let gcsd = GetCurrentScriptDirectory;
  let ParentLife = 0;
  let ParentLifeMax = 0;

   let distance = 0;
   let distance2 = 0;
   let cangle = 0;
   let cangle2 = 0;

   let G_angle = 0;

  //シールドに必要な変数定義// 
   let G_obj = 0;
   let cnt = 0;
   let Life = 160; //敵本体のライフ
   let ShieldLife = 100; //シールドのライフ
  //ここまで//

 @Initialize{
        let imgEnemy= gcsd~"img\enemy_all.png";
       SetLife(Life + ShieldLife);//シールドに必要なもの//
    SetTexture(imgEnemy);
    SetGraphicRect(53, 193, 91, 259);
    SetGraphicScale(0.5, 0.5);

   LoadUserShotData(gcsd~"ShotData_01.txt");
   ShieldMiniTask(0.7, 23, 32);//シールドに必要なもの//
   MoveTask;
   MainTask;
  }

 @MainLoop{
   ParentLife = GetCommonDataDefault("Boss02Life", 0);
   ParentLifeMax = GetCommonDataDefault("Boss02LifeMax", 0);

       //当たり判定は消す//
         Obj_SetPosition( G_obj, GetX, GetY );

     if(GetX < GetClipMinX - 150 || GetX > GetClipMaxX + 150 || GetY < GetClipMinY - 150 || GetY > GetClipMaxY + 150){
        VanishEnemy;
      }
       yield;
  }

 @DrawLoop{
   DrawGraphic(GetX, GetY);
  }

 @Finalize{
     if(GetX < GetClipMinX - 150 || GetX > GetClipMaxX + 150 || GetY < GetClipMinY - 150 || GetY > GetClipMaxY + 150){
   }else{
     CreateEnemyFromFile(gcsd~"EnemyDeath01.txt", GetX, GetY, 0, 0, 0);
      SetCommonData("Power", rand(4,7));
      SetCommonData("Shield_Item", rand(7,8));
    }
  }

     function Wait(let x){
    loop(x){yield;}
        }

 task MoveTask{
   SetCoordinateType(COODINATE_TYPE_PARENT);
     let angle = GetArgument;
    loop(140){
      SetX(distance*cos(angle));
      SetY(distance2*sin(angle));
        angle -= 1;
      distance += 1; distance2 += 0.5;
      yield;
    }

   loop{
      SetX(distance*cos(angle+cangle));
      SetY(distance2*sin(angle+cangle2));
        angle --;
        G_angle = angle;
     yield;
   }

}

 task Cangle01(time, cnt){
  loop(time){
     cangle += cnt;
    yield;
   }
}

 task Cangle02(time, cnt){
  loop(time){
     cangle2 += cnt;
    yield;
   }
}

 task Dtask01(time, cnt){
  loop(time){
     distance += cnt;
    yield;
   }
}

 task Dtask02(time, cnt){
  loop(time){
     distance2 += cnt;
    yield;
   }
}

 task MainTask{
  Wait(140);
   Wait(120);
   while(ParentLife > ParentLifeMax*1/4){

   loop(100){
    CreateShot01(GetX+15*cos(G_angle), GetY+15*sin(G_angle), 2.5, G_angle, 20, 10);
      Wait(8);
     }
    Wait(150);
   loop(100){
    CreateShot01(GetX+15*cos(G_angle*1.2), GetY+15*sin(G_angle*1.2), 2.5, G_angle*1.2, 21, 10);
      Wait(4);
     }
    Wait(100);

  }

  Wait(100);
//最終攻撃//
   while(ParentLife <= ParentLifeMax*1/4){
    yield;
  }

}

#include_function".\Function_ShieldMini.txt"
}